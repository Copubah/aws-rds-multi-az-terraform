name: Terraform Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.6.0
        
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      
    - name: Terraform Init
      run: terraform init -backend=false
      
    - name: Terraform Validate
      run: terraform validate
      
    - name: Validate Python Lambda Function
      run: |
        python3 -m py_compile lambda/rds_health_check.py
        echo "Lambda function syntax validation passed"
        
    - name: Check for Security Issues
      run: |
        echo "Checking for potential security issues..."
        
        # Check for hardcoded secrets (excluding variable references)
        if grep -r "password.*=" . --include="*.tf" --exclude-dir=".terraform" | grep -v "var\." | grep -v "sensitive" | grep -v "description"; then
          echo "WARNING: Potential hardcoded passwords found"
          exit 1
        fi
        
        # Check for overly permissive CIDR blocks in RDS ingress rules
        if grep -r "0.0.0.0/0" modules/rds/ --include="*.tf" | grep "ingress" | grep -v "description.*MySQL access from allowed CIDRs"; then
          echo "WARNING: Found overly permissive RDS ingress rules"
          exit 1
        fi
        
        echo "Security validation passed"
        
    - name: Validate Environment Files
      run: |
        echo "Validating environment configuration files..."
        
        for env in dev prod; do
          tfvars_file="environments/${env}.tfvars"
          if [[ -f "$tfvars_file" ]]; then
            echo "Checking $tfvars_file..."
            
            # Check for required variables
            required_vars=("environment" "alert_email")
            for var in "${required_vars[@]}"; do
              if ! grep -q "^${var}[[:space:]]*=" "$tfvars_file"; then
                echo "ERROR: Required variable '$var' not found in $tfvars_file"
                exit 1
              fi
            done
            
            echo "$tfvars_file validation passed"
          else
            echo "ERROR: $tfvars_file not found"
            exit 1
          fi
        done
        
    - name: Validate Project Structure
      run: |
        echo "Validating project structure..."
        
        required_files=(
          "main.tf"
          "variables.tf"
          "outputs.tf"
          "provider.tf"
          "README.md"
          "modules/vpc/main.tf"
          "modules/rds/main.tf"
          "modules/ec2/main.tf"
          "lambda/rds_health_check.py"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [[ ! -f "$file" ]]; then
            missing_files+=("$file")
          fi
        done
        
        if [[ ${#missing_files[@]} -eq 0 ]]; then
          echo "All required files present"
        else
          echo "ERROR: Missing files:"
          for file in "${missing_files[@]}"; do
            echo "  - $file"
          done
          exit 1
        fi
        
        echo "Project structure validation passed"